apiVersion: v1
kind: ConfigMap
metadata:
  name: authentication-sql
  namespace: postgui
data:
  Authentication.sql: |
    CREATE EXTENSION IF NOT EXISTS pgcrypto;
    CREATE EXTENSION IF NOT EXISTS pgjwt;

    CREATE SCHEMA IF NOT EXISTS basic_auth;
    CREATE TABLE IF NOT EXISTS
    basic_auth.users (
    email TEXT PRIMARY KEY CHECK ( email ~* '^.+@.+\..+$' ),
    pass TEXT NOT NULL CHECK (length(pass) < 512),
    role NAME NOT NULL CHECK (length(role) < 512)
    );

    CREATE OR REPLACE FUNCTION basic_auth.check_role_exists() RETURNS TRIGGER
    LANGUAGE plpgsql
    AS $$
    BEGIN
      IF NOT EXISTS (SELECT 1 FROM pg_roles AS r WHERE r.rolname = new.role) THEN
        raise foreign_key_violation using message =
        'unknown database role: ' || new.role;
        return null;
      END IF;
      return new;
    END
    $$;

    DROP TRIGGER IF EXISTS ensure_user_role_exists ON basic_auth.users;
    CREATE CONSTRAINT TRIGGER ensure_user_role_exists
      AFTER INSERT OR UPDATE ON basic_auth.users
      FOR EACH ROW
      execute procedure basic_auth.check_role_exists();

    CREATE OR REPLACE FUNCTION basic_auth.encrypt_pass() RETURNS TRIGGER
    LANGUAGE plpgsql
    AS $$
    BEGIN
      IF tg_op = 'INSERT' OR new.pass <> old.pass THEN
        new.pass = crypt(new.pass, gen_salt('bf'));
      END IF;
      return new;
    END
    $$;

    DROP TRIGGER IF EXISTS encrypt_pass ON basic_auth.users;
    CREATE TRIGGER encrypt_pass
      BEFORE INSERT OR UPDATE ON basic_auth.users
      FOR EACH ROW
      execute procedure basic_auth.encrypt_pass();

    CREATE OR REPLACE FUNCTION basic_auth.user_role(email TEXT, pass TEXT) RETURNS name
    LANGUAGE plpgsql
    AS $$
    BEGIN
      return (
      SELECT role FROM basic_auth.users
      WHERE users.email = user_role.email
        AND users.pass = crypt(user_role.pass, users.pass)
      );
    END;
    $$;

    CREATE TYPE basic_auth.jwt_token AS (
      token text
    );

    CREATE OR REPLACE FUNCTION login(email TEXT, pass TEXT) RETURNs basic_auth.jwt_token
    LANGUAGE plpgsql
    AS $$
    DECLARE
      _role name;
      result basic_auth.jwt_token;
    BEGIN
      -- check email and password
      SELECT basic_auth.user_role(email, pass) INTO _role;
      IF _role IS NULL THEN
        raise invalid_password using message = 'invalid user or password';
      END IF;

      SELECT sign(
          row_to_json(r), 'fkajs;dlkfjieondskj82naj8jkldjkldas87'
        ) AS token
        from (
          SELECT _role AS role, login.email AS email,
            extract(epoch from now())::integer + 60*60 AS exp
        ) r
        into result;
      return result;
    END;
    $$;

    INSERT INTO basic_auth.users VALUES ('admin@domain.com', 'CHNAGME1234', 'edituser');
    INSERT INTO basic_auth.users VALUES ('edit@domain.com', 'CHNAGEME123', 'edituser');
    INSERT INTO basic_auth.users VALUES ('read@domain.com', 'CHANGEME12', 'readuser');

    CREATE ROLE anon;
    CREATE ROLE authenticator noinherit;
    GRANT anon TO authenticator;

    GRANT usage ON SCHEMA public, basic_auth TO anon;
    GRANT SELECT ON TABLE pg_authid TO anon;
    GRANT SELECT ON TABLE basic_auth.users TO anon;
    GRANT EXECUTE ON FUNCTION login(text,text) TO anon;